#ifndef _MESHRENDERER_
#define _MESHRENDERER_

#include <string>

#include "../Component.hpp"

class VulkanDescriptor;
class Mesh;
class Shader;
class Texture;
class VulkanPipeLine;
class VulkanCommandBuffer;

using namespace std;

/*
* Object Component Used To Render A Mesh
*/
class MeshRenderer : public Component {
public:
    /* Shader Uniform Data */
    VulkanDescriptor* uniformData;
    /* Mesh Data */
    Mesh* mesh;
    /* Mesh Shader */
    Shader* shader;
    /* Mesh Texture (Optional) */
    Texture* texture;
    /* Vulkan PipeLine (Generated By Component) */
    VulkanPipeLine* pipeLine;
    /* Vulkan Command Buffer (Generated By Component) */
    VulkanCommandBuffer* commandBuffer;

    /**
    * Prepare Mesh Component
    * @param Shader The Shader You Want The Mesh To Use
    * @param Model  The Model You Want To User
    * @param Texture (Optional) The Texture You Want To Use 
    */
    void PrepareObject(const char* Shader, const char* Model, Texture* Texture = nullptr);
    /**
    * Load Mesh Component Before Calling This Function You Must Call \ref PrepareObject(const char*, const char*, const char*)
    * @param UniformName This Name Will Be Used To Generate Or Get The Vulkan Pipeline With Name Vertex_UniformName
    */
    void LoadObject(string UniformName);
    /**
    * Update Command Buffer Uniform Data (Overridable)
    */
    virtual void Update() override;
    /**
    * Prepare Command Buffers To Be Rendered (Overridable)
    */
    virtual void PreRender() override;
    /**
    * Add Command Buffers To Be Rendered (Overridable)
    */
    virtual void Render() override;
    /**
    * Clean Uniform Data (Overridable)
    */
    virtual void Clean() override;
};

#endif